// app.js - client logic for static IMEI Image Viewer
let currentImages = [];

/**
 * Expectation:
 * If user sets a valid Apps Script API URL that accepts GET ?imei=..., the API should return JSON:
 * [ { "name": "...", "url": "https://..." }, ... ]
 *
 * Otherwise, user can paste image URLs manually into textarea.
 */

function fetchFromGas(){
  const gasUrl = document.getElementById('gasUrl').value.trim();
  const imei = document.getElementById('imeiInput').value.trim();
  if(!gasUrl) return alert('Vui l√≤ng nh·∫≠p Apps Script API URL.');
  if(!imei) return alert('Vui l√≤ng nh·∫≠p IMEI.');
  const u = new URL(gasUrl);
  u.searchParams.set('imei', imei);
  document.getElementById('images').innerHTML = '‚è≥ ƒêang g·ªçi API...';
  fetch(u.toString()).then(r=>{
    if(!r.ok) throw new Error('API tr·∫£ l·ªói: '+r.status);
    return r.json();
  }).then(data=>{
    if(!Array.isArray(data)) throw new Error('API ph·∫£i tr·∫£ v·ªÅ m·∫£ng JSON.');
    loadImages(data);
  }).catch(err=>{
    alert('L·ªói khi g·ªçi API: '+err.message);
    document.getElementById('images').innerHTML = '';
  });
}

function loadFromTextarea(){
  const raw = document.getElementById('manualUrls').value.trim();
  if(!raw) return alert('D√°n √≠t nh·∫•t 1 link ·∫£nh');
  const lines = raw.split(/\r?\n/).map(s=>s.trim()).filter(Boolean);
  const imgs = lines.map((u,i)=>({ name: 'image_'+(i+1), url: u }));
  loadImages(imgs);
}

function loadImages(images){
  currentImages = images;
  const container = document.getElementById('images');
  if(!images || images.length===0){ container.innerHTML = '<p>Kh√¥ng c√≥ ·∫£nh.</p>'; return; }
  container.innerHTML = images.map((img, idx)=>`
    <div class="image-card">
      <img data-i="${idx}" src="${img.url}" alt="${img.name}" onclick="openPreview(${idx})" />
      <div class="meta">${escapeHtml(img.name)}</div>
      <div class="actions">
        <button class="small" onclick="copyLink(event, '${img.url}')">üìã Copy link</button>
        <button class="small" onclick="downloadSingle(event, '${img.url}', '${sanitizeFilename(img.name)}')">‚¨áÔ∏è Download</button>
      </div>
    </div>
  `).join('');
}

// helper: escape
function escapeHtml(s){ return (s+'').replace(/[&<>"']/g, c=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c])); }
function sanitizeFilename(n){ return (n||'image').replace(/[^a-z0-9.\-_]/gi,'_'); }

// copy single link (text)
function copyLink(ev, url){
  ev.stopPropagation();
  navigator.clipboard.writeText(url).then(()=>alert('‚úÖ ƒê√£ copy link ·∫£nh')).catch(e=>alert('‚ùå Kh√¥ng th·ªÉ copy: '+e.message));
}

// download single
function downloadSingle(ev, url, name){
  ev.stopPropagation();
  const a = document.createElement('a');
  a.href = url;
  a.download = name||'image.jpg';
  document.body.appendChild(a);
  a.click();
  a.remove();
}

// copy all links (one-per-line)
function copyAllLinks(){
  if(!currentImages || currentImages.length===0) return alert('Kh√¥ng c√≥ ·∫£nh ƒë·ªÉ copy');
  const txt = currentImages.map(i=>i.url).join('\n');
  navigator.clipboard.writeText(txt).then(()=>alert('‚úÖ ƒê√£ copy to√†n b·ªô link ·∫£nh')).catch(e=>alert('‚ùå L·ªói khi copy: '+e.message));
}

// open modal preview (copy box)
function openCopyBox(){
  const box = document.getElementById('copyBox');
  const content = document.getElementById('copyContent');
  if(!currentImages || currentImages.length===0){ alert('Kh√¥ng c√≥ ·∫£nh'); return; }
  content.innerHTML = currentImages.map(i=>`<img src="${i.url}" style="max-width:220px; margin:6px; border-radius:6px;">`).join('');
  box.style.display = 'flex';
}

// try to copy all images as blobs (may fail in some hosts)
async function tryCopyAll(){
  const imgs = Array.from(document.querySelectorAll('#copyContent img'));
  if(imgs.length===0) return alert('Kh√¥ng c√≥ ·∫£nh trong h·ªôp');
  const items = [];
  for(const img of imgs){
    try{
      const r = await fetch(img.src);
      const b = await r.blob();
      items.push(new ClipboardItem({ [b.type]: b }));
    }catch(e){
      console.warn('fetch err', e);
    }
  }
  if(items.length===0) return alert('Kh√¥ng t·∫£i ƒë∆∞·ª£c ·∫£nh ƒë·ªÉ copy.');
  try{
    await navigator.clipboard.write(items);
    alert('‚úÖ ƒê√£ copy ·∫£nh v√†o clipboard (n·∫øu browser h·ªó tr·ª£).');
  }catch(e){
    alert('‚ö†Ô∏è Tr√¨nh duy·ªát kh√¥ng cho ph√©p copy h√†ng lo·∫°t ·∫£nh.\nB·∫°n c√≥ th·ªÉ d√πng Ctrl+A ‚Üí Ctrl+C trong h·ªôp ƒë·ªÉ sao ch√©p th·ªß c√¥ng.');
  }
}

function closeCopyBox(){ document.getElementById('copyBox').style.display='none'; }

// download all images sequentially (no zip)
async function downloadAll(){
  if(!currentImages || currentImages.length===0) return alert('Kh√¥ng c√≥ ·∫£nh ƒë·ªÉ t·∫£i');
  for(let i=0;i<currentImages.length;i++){
    const it = currentImages[i];
    downloadSingle(new Event('click'), it.url, sanitizeFilename(it.name||('image_'+(i+1))));
    await new Promise(r=>setTimeout(r, 450));
  }
  alert('‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu t·∫£i t·∫•t c·∫£ ·∫£nh (m·ªü folder t·∫£i ƒë·ªÉ ki·ªÉm tra).');
}
